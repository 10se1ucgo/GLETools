from __future__ import with_statement
from contextlib import nested

import pyglet
from pyglet.gl import *
from gletools import ShaderProgram, FragmentShader, Texture, Framebuffer, projection, ortho

window = pyglet.window.Window()
texture = Texture(64, 64, filter=GL_NEAREST)
framebuffer = Framebuffer()
framebuffer.texture = texture
program = ShaderProgram(
    FragmentShader('''void main(){
        vec4 vec = gl_ProjectionMatrixInverse * gl_FragCoord;
        float value = acos(dot(vec, vec4(0.0, 0.0, -1.0, 1.0)));
        gl_FragColor.g = normalized(vec);
    }''')
)

def quad(size):
    glBegin(GL_QUADS)
    glTexCoord2f(1.0, 1.0)
    glVertex3f(size, size, 0.0)
    glTexCoord2f(1.0, 0.0)
    glVertex3f(size, 0.0, 0.0)
    glTexCoord2f(0.0, 0.0)
    glVertex3f(0.0, 0.0, 0.0)
    glTexCoord2f(0.0, size)
    glVertex3f(0.0, size, 0.0)
    glEnd()
    
@window.event
def on_draw():
    with nested(framebuffer, program):
        ortho(texture.width, texture.height)
        quad(texture.width)
   
    with texture:
        projection(45, window.width, window.height)
        glTranslatef(-1, -1, -3)
        glColor3f(1.0, 1.0, 1.0)
        quad(2.0)

pyglet.app.run()
